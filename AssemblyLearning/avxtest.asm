; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\project\qt\avxtest\avxtest\avxtest.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?supports_AVX@@YAHXZ				; supports_AVX
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File d:\project\qt\avxtest\avxtest\avxtest.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?supports_AVX@@YAHXZ
_TEXT	SEGMENT
?supports_AVX@@YAHXZ PROC				; supports_AVX, COMDAT

; 8    : {   

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 9    : 	_asm{
; 10   : 		mov eax, 1;

	mov	eax, 1

; 11   : 		cpuid;

	cpuid

; 12   : 		and ecx, 018000000H;

	and	ecx, 402653184				; 18000000H

; 13   : 		cmp ecx, 018000000H;    check both OSXSAVE and AVX feature flags

	cmp	ecx, 402653184				; 18000000H

; 14   : 		jne not_supported;      processor supports AVX instructions and XGETBV is enabled by OS

	jne	SHORT $not_supported$5257

; 15   : 		mov ecx, 0;             specify 0 for XCR0 register

	mov	ecx, 0

; 16   : 		XGETBV ;                result in EDX:EAX

	xgetbv

; 17   : 		and eax, 06H;

	and	eax, 6

; 18   : 		cmp eax, 06H;           check OS has enabled both XMM and YMM state support

	cmp	eax, 6

; 19   : 		jne not_supported;

	jne	SHORT $not_supported$5257

; 20   : 		mov eax, 1;

	mov	eax, 1

; 21   : 		jmp done;

	jmp	SHORT $done$5258
$not_supported$5257:

; 22   : NOT_SUPPORTED:
; 23   : 		mov eax, 0;

	mov	eax, 0
$done$5258:

; 24   : done:
; 25   : 	}
; 26   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?supports_AVX@@YAHXZ ENDP				; supports_AVX
_TEXT	ENDS
PUBLIC	??_C@_0BE@CMIEHEKK@cpu?$CFs?5supports?5avx?6?$AA@ ; `string'
PUBLIC	??_C@_04CLDNJHDJ@?5not?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BF@GHCBDNFI@x?$DN?$CFd?5y?$DN?$CFd?5c?$DN?$CFd?5d?$DN?$CFd?6?$AA@ ; `string'
PUBLIC	_wmain
EXTRN	__imp__printf:PROC
;	COMDAT ??_C@_0BE@CMIEHEKK@cpu?$CFs?5supports?5avx?6?$AA@
CONST	SEGMENT
??_C@_0BE@CMIEHEKK@cpu?$CFs?5supports?5avx?6?$AA@ DB 'cpu%s supports avx', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLDNJHDJ@?5not?$AA@
CONST	SEGMENT
??_C@_04CLDNJHDJ@?5not?$AA@ DB ' not', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHCBDNFI@x?$DN?$CFd?5y?$DN?$CFd?5c?$DN?$CFd?5d?$DN?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BF@GHCBDNFI@x?$DN?$CFd?5y?$DN?$CFd?5c?$DN?$CFd?5d?$DN?$CFd?6?$AA@ DB 'x'
	DB	'=%d y=%d c=%d d=%d', 0aH, 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _wmain
_TEXT	SEGMENT
tv77 = -256						; size = 4
_i$5267 = -56						; size = 4
_d$ = -44						; size = 4
_c$ = -32						; size = 4
_y$ = -20						; size = 4
_x$ = -8						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 29   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-256]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 30   : 	int x = 0;

	mov	DWORD PTR _x$[ebp], 0

; 31   : 	int y = 1;

	mov	DWORD PTR _y$[ebp], 1

; 32   : 	int c = 0;

	mov	DWORD PTR _c$[ebp], 0

; 33   : 	int d = 0;

	mov	DWORD PTR _d$[ebp], 0

; 34   : 
; 35   : 	c = (x == 1);

	xor	eax, eax
	cmp	DWORD PTR _x$[ebp], 1
	sete	al
	mov	DWORD PTR _c$[ebp], eax

; 36   : 
; 37   : 	for (int i = 0; i < 128; i++)

	mov	DWORD PTR _i$5267[ebp], 0
	jmp	SHORT $LN3@wmain
$LN2@wmain:
	mov	eax, DWORD PTR _i$5267[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5267[ebp], eax
$LN3@wmain:
	cmp	DWORD PTR _i$5267[ebp], 128		; 00000080H
	jge	SHORT $LN1@wmain

; 38   : 		d++;

	mov	eax, DWORD PTR _d$[ebp]
	add	eax, 1
	mov	DWORD PTR _d$[ebp], eax
	jmp	SHORT $LN2@wmain
$LN1@wmain:

; 39   : 
; 40   : 	_asm{
; 41   : 		xor eax, eax;

	xor	eax, eax

; 42   : 		XGETBV;

	xgetbv

; 43   : 		mov dword ptr [x], eax;

	mov	DWORD PTR _x$[ebp], eax

; 44   : 
; 45   : 		cmp dword ptr [y], 0;

	cmp	DWORD PTR _y$[ebp], 0

; 46   : 		sete al;

	sete	al

; 47   : 		mov dword ptr [c], eax;

	mov	DWORD PTR _c$[ebp], eax

; 48   : 	}
; 49   : 
; 50   : 	printf("x=%d y=%d c=%d d=%d\n", x, y, c, d);

	mov	esi, esp
	mov	eax, DWORD PTR _d$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _y$[ebp]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	push	OFFSET ??_C@_0BF@GHCBDNFI@x?$DN?$CFd?5y?$DN?$CFd?5c?$DN?$CFd?5d?$DN?$CFd?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 51   : 	printf("cpu%s supports avx\n", supports_AVX() ? "" : " not");

	call	?supports_AVX@@YAHXZ			; supports_AVX
	test	eax, eax
	je	SHORT $LN6@wmain
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
	jmp	SHORT $LN7@wmain
$LN6@wmain:
	mov	DWORD PTR tv77[ebp], OFFSET ??_C@_04CLDNJHDJ@?5not?$AA@
$LN7@wmain:
	mov	esi, esp
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	push	OFFSET ??_C@_0BE@CMIEHEKK@cpu?$CFs?5supports?5avx?6?$AA@
	call	DWORD PTR __imp__printf
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 52   : 	return 0;

	xor	eax, eax

; 53   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_wmain	ENDP
_TEXT	ENDS
END
